<?php

namespace GroundhoggBookingCalendar\Admin\Calendars;

use Groundhogg\Admin\Admin_Page;
use Groundhogg\Base_Object;
use GroundhoggBookingCalendar\Api\Calendar_Api;
use GroundhoggBookingCalendar\Api\Google_Connection_Api;
use GroundhoggBookingCalendar\Calendar_Sync;
use GroundhoggBookingCalendar\Classes\Appointment_Reminder;
use GroundhoggBookingCalendar\Classes\Google_Calendar;
use GroundhoggBookingCalendar\Classes\Google_Connection;
use GroundhoggBookingCalendar\Classes\SMS_Reminder;
use GroundhoggBookingCalendar\Connections\Zoom;
use GroundhoggBookingCalendar\Plugin;
use WP_Error;
use function Groundhogg\action_url;
use function Groundhogg\admin_page_url;
use function Groundhogg\array_map_to_class;
use function Groundhogg\current_user_is;
use function Groundhogg\get_array_var;
use function Groundhogg\get_contactdata;
use function Groundhogg\get_db;
use function Groundhogg\get_owners;
use function Groundhogg\get_post_var;
use function Groundhogg\get_request_var;
use function Groundhogg\get_url_var;
use GroundhoggBookingCalendar\Classes\Appointment;
use GroundhoggBookingCalendar\Classes\Calendar;
use function Groundhogg\is_replacement_code_format;
use function Groundhogg\remote_post_json;
use function Groundhogg\utils;
use function Groundhogg\validate_mobile_number;
use function GroundhoggBookingCalendar\is_sms_plugin_active;
use function GroundhoggBookingCalendar\set_calendar_default_settings;
use function GroundhoggBookingCalendar\validate_calendar_slug;
use function GroundhoggBookingCalendar\zoom;
use function Groundhogg\managed_page_url;


// Exit if accessed directly
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

/**
 * Class Calendar_Page
 *
 * @package GroundhoggBookingCalendar\Admin\Calendars
 */
class Calendar_Page extends Admin_Page {

	public function help() {
		// TODO: Implement help() method.
	}

	protected function add_additional_actions() {
		// TODO: Implement add_additional_actions() method.
	}

	protected function add_ajax_actions() {
	}

	public function get_slug() {
		return 'gh_calendar';
	}

	public function get_name() {
		return _x( 'Calendars', 'page_title', 'groundhogg-calendar' );
	}

	public function get_title() {

		if ( $calendar_id = get_url_var( 'calendar' ) ) {

			$calendar = new Calendar( $calendar_id );

			return $calendar->get_name();
		}

		return parent::get_title(); // TODO: Change the autogenerated stub
	}

	public function get_cap() {
		return 'edit_calendars';
	}

	public function get_item_type() {
		return 'calendar';
	}

	public function get_priority() {
		return 48;
	}

	public function get_title_actions() {
		if ( current_user_is( 'sales_manager' ) ) {
			return [];
		} else {
			$actions = [];

			if ( $calendar_id = get_url_var( 'calendar' ) ) {

				$calendar = new Calendar( $calendar_id );

				$actions[] = [
					'link'   => managed_page_url( sprintf( 'calendar/%s/', $calendar->slug ) ),
					'action' => __( 'View', 'groundhogg-calendar' ),
					'target' => '_self',
				];

				$actions[] = [
					'link'   => admin_page_url( 'gh_appointments', [ 'calendar_id' => $calendar_id ] ),
					'action' => __( 'All Appointments', 'groundhogg-calendar' ),
					'target' => '_self',
				];

				$actions[] = [
					'link'   => admin_page_url( 'gh_appointments', [
						'action'      => 'add',
						'calendar_id' => $calendar_id
					] ),
					'action' => __( 'New Appointment', 'groundhogg-calendar' ),
					'target' => '_self',
				];
			}

			$actions[] = [
				'link'   => $this->admin_url( [ 'action' => 'add' ] ),
				'action' => __( 'New Calendar', 'groundhogg' ),
				'target' => '_self',
			];

			return $actions;
		}
	}


	/**
	 * enqueue editor scripts for full calendar
	 */
	public function scripts() {
		wp_enqueue_style( 'groundhogg-admin-element' );

		if ( $this->get_current_action() === 'edit' ) {
			wp_enqueue_style( 'groundhogg-calender-admin' );

			wp_enqueue_editor();
			wp_enqueue_script( 'groundhogg-appointments-calendar-settings' );

			$calendar = new Calendar( get_url_var( 'calendar' ) );

			$google_connections = get_db( 'google_connections' )->query();
			array_map_to_class( $google_connections, Google_Connection::class );

			$owners            = get_owners();
			$owner_connections = [];

			foreach ( $owners as $owner ) {

				$owner_connections[ $owner->ID ] = [
					'zoom'   => get_user_meta( $owner->ID, 'gh_zoom_account_id', true ),
					'google' => get_user_meta( $owner->ID, 'gh_google_account_id', true ),
				];
			}

			wp_localize_script( 'groundhogg-appointments-calendar-settings', 'GroundhoggCalendar', [
				'calendar'    => $calendar,
				'routes'      => [
					'calendars'          => rest_url( Calendar_Api::NAME_SPACE . '/calendars' ),
					'google_connections' => rest_url( Google_Connection_Api::NAME_SPACE . '/google_connections' ),
				],
				'active'      => [
					'sms' => is_sms_plugin_active()
				],
				'connect'     => [
					'zoom'   => action_url( 'access_code_zoom', [
						'calendar' => $calendar->get_id()
					] ),
					'google' => action_url( 'access_code', [
						'calendar' => $calendar->get_id()
					] )
				],
				'disconnect'  => [
					'zoom'   => action_url( 'disconnect_zoom', [
						'calendar' => $calendar->get_id()
					] ),
					'google' => action_url( 'disconnect_google', [
						'calendar' => $calendar->get_id()
					] )
				],
				'connections' => [
					'google' => $google_connections,
					'zoom'   => zoom()->get_connections(),
					'owners' => $owner_connections
				]
			] );
		}
	}

	public function view() {
		if ( ! class_exists( 'Calendars_Table' ) ) {
			include __DIR__ . '/calendars-table.php';
		}

		$calendars_table = new Calendars_Table();
		$this->search_form( __( 'Search Calendars', 'groundhogg-calendar' ) );
		$calendars_table->prepare_items();
		$calendars_table->display();
	}

    public function page() {

        if ( $this->get_current_action() === 'edit' ){
            $this->edit();
            return;
        }

	    parent::page(); // TODO: Change the autogenerated stub
    }

	public function edit() {
		if ( ! current_user_can( 'edit_calendars') ) {
			$this->wp_die_no_access();
		}
		?>
		<div id="gh-calendar-settings"></div>
		<?php
	}

	public function add() {
		if ( ! current_user_can( 'add_calendars' ) ) {
			$this->wp_die_no_access();
		}

		include __DIR__ . '/add.php';
	}


	public function process_delete() {

		if ( ! current_user_can( 'delete_calendars' ) ) {
			$this->wp_die_no_access();
		}

		$calendar = new Calendar( get_url_var( 'calendar' ) );

		if ( ! $calendar->exists() ) {
			return new \WP_Error( 'failed', __( 'Operation failed Calendar not Found.', 'groundhogg-calendar' ) );
		}

		if ( $calendar->delete() ) {
			$this->add_notice( 'success', __( 'Calendar deleted successfully!' ), 'success' );
		}

		return true;
	}


	/**
	 * Process add calendar and redirect to settings tab on successful calendar creation.
	 *
	 * @return string|\WP_Error
	 */
	public function process_add() {

		if ( ! current_user_can( 'add_calendars' ) ) {
			$this->wp_die_no_access();
		}

		$name        = sanitize_text_field( get_post_var( 'name' ) );
		$description = wp_kses_post( get_post_var( 'description' ) );

		if ( ( ! $name ) || ( ! $description ) ) {
			return new \WP_Error( 'no_data', __( 'Please enter name and description of calendar.', 'groundhogg-calendar' ) );
		}

		$owner_id = absint( get_request_var( 'owner_id', get_current_user_id() ) );

		$calendar = new Calendar( [
			'user_id'     => $owner_id,
			'name'        => $name,
			'description' => $description,
		] );

		if ( ! $calendar->exists() ) {
			return new \WP_Error( 'no_calendar', __( 'Something went wrong while creating calendar.', 'groundhogg-calendar' ) );
		}

		/* SET DEFAULTS */
		set_calendar_default_settings( $calendar );

		// update meta data to get set sms
		$this->add_notice( 'success', __( 'New calendar created successfully!', 'groundhogg-calendar' ), 'success' );

		return admin_url( 'admin.php?page=gh_calendar&action=edit&calendar=' . $calendar->get_id() . '&tab=settings' );

	}

	/**
	 * manage tab's post request by calling appropriate function.
	 *
	 * @return void
	 */
	public function process_edit() {

	}

	/**
	 * Redirects users to GOOGLE oauth authentication URL with all the details.
	 *
	 * @return string
	 */
	public function process_access_code() {

		$redirect_uri = admin_page_url( 'gh_calendar', [
			'action'   => 'verify_google_code',
			'calendar' => get_url_var( 'calendar' ),
			'user'     => get_url_var( 'user' ),
			'_wpnonce' => wp_create_nonce()
		] );

		return add_query_arg( [ 'redirect_uri' => urlencode( $redirect_uri ) ], 'https://proxy.groundhogg.io/oauth/google/start/' );
	}

	/**
	 * Retrieves authentication code from the response url and creates authentication token for the GOOGLE.
	 *
	 * @return bool|WP_Error
	 */
	public function process_verify_google_code() {

		if ( ! get_request_var( 'code' ) ) {
			return new \WP_Error( 'no_code', __( 'Authentication code not found!', 'groundhogg-calendar' ) );
		}

		$auth_code   = get_url_var( 'code' );
		$calendar_id = absint( get_url_var( 'calendar' ) );
		$user_id     = absint( get_url_var( 'user', get_current_user_id() ) );

		$connection = new Google_Connection();
		$connection->create_from_auth( $auth_code );

		if ( $connection->has_errors() ) {
			return $connection->get_last_error();
		}

		$connection->sync_calendars();

		update_user_meta( $user_id, 'gh_google_account_id', $connection->account_id );

		$this->add_notice( 'success', __( 'Connection to Google was successful!', 'groundhogg-calendar' ), 'success' );

		return admin_page_url( 'gh_calendar', [
			'action'   => 'edit',
			'calendar' => $calendar_id,
		], '/google/' . $user_id . '/' );
	}


	/**
	 * Disconnect the user from the given connection
	 *
	 * @return string
	 */
	public function process_disconnect_google() {

		$user        = absint( get_url_var( 'user' ) );
		$calendar_id = absint( get_url_var( 'calendar' ) );

		delete_user_meta( $user, 'gh_google_account_id' );

		return admin_page_url( 'gh_calendar', [
			'action'   => 'edit',
			'calendar' => $calendar_id,
		], '/google/' );

	}

	/**
	 * Redirects users to ZOOM oauth authentication URL with all the details.
	 *
	 * @return string
	 */
	public function process_access_code_zoom() {

		$redirect_uri = admin_page_url( 'gh_calendar', [
			'action'   => 'verify_zoom_code',
			'user'     => get_url_var( 'user' ),
			'calendar' => get_url_var( 'calendar' ),
			'_wpnonce' => wp_create_nonce()
		] );

		return add_query_arg( [ 'redirect_uri' => urlencode( $redirect_uri ) ], 'https://proxy.groundhogg.io/oauth/zoom/start/' );
	}


	/**
	 * Retrieves authentication code from the response url and creates authentication token for the ZOOM.
	 *
	 * @return bool|WP_Error
	 */
	public function process_verify_zoom_code() {

		if ( ! get_request_var( 'code' ) ) {
			return new \WP_Error( 'no_code', __( 'Authentication code not found!', 'groundhogg-calendar' ) );
		}

		$auth_code   = get_request_var( 'code' );
		$user_id     = absint( get_request_var( 'user', get_current_user_id() ) );
		$calendar_id = absint( get_request_var( 'calendar' ) );

		$account_id = zoom()->init_connection( $auth_code );

		if ( is_wp_error( $account_id ) ) {
			return $account_id;
		}

		// Set the account ID for the user
		update_user_meta( $user_id, 'gh_zoom_account_id', $account_id );

		$this->add_notice( 'success', __( 'Connection to Zoom successfully completed!', 'groundhogg-calendar' ), 'success' );

		return admin_page_url( 'gh_calendar', [
			'action'   => 'edit',
			'calendar' => $calendar_id,
		], '/zoom/' );
	}

	/**
	 * Disconnect the user from the given connection
	 *
	 * @return string
	 */
	public function process_disconnect_zoom() {

		$user        = absint( get_url_var( 'user' ) );
		$calendar_id = absint( get_url_var( 'calendar' ) );

		delete_user_meta( $user, 'gh_zoom_account_id' );

		return admin_page_url( 'gh_calendar', [
			'action'   => 'edit',
			'calendar' => $calendar_id,
		], '/zoom/' );

	}
}
