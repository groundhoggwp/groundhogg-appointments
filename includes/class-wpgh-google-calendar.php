<?php
/**
 *
 * Imports Google calendar library.
 * Creates client object to access google services.
 *
 */

if ( ! defined( 'ABSPATH' ) ) exit;

/**
 * Class WPGH_DB_Goole_Calendar
 */
class WPGH_Google_Calendar
{
    /**
     * Imports require file for google.
     *
     *
     * WPGH_DB_Google_Calendar constructor.
     */
    public function __construct()
    {
        require_once ( WPGH_APPOINTMENT_PLUGIN_DIR . 'assets/lib/google-api/vendor/autoload.php' );

    }

    /**
     * create google client object to access google services.
     *
     *
     * @param $calendar_id - id of calendar which client user retrieve
     * @return Google_Client|WP_Error
     */
    public function get_google_client_form_access_token( $calendar_id )
    {
        //get basic client

        $client =  $this->get_basic_client();

        if( is_wp_error( $client ) ) {
           return $client;
        }

        //retrieve access code and validate access code..
        $access_token  =  WPGH_APPOINTMENTS()->calendarmeta->get_meta( $calendar_id,'access_token' , true );
        if( !$access_token ) {
            return  new WP_Error( 'ACCESS_TOKEN', __( "Access token not found!", "groundhogg" ) );
        }

        $client->setAccessToken( $access_token );
        if( $client->isAccessTokenExpired() ) {
            if($client->getRefreshToken()){
                $client->fetchAccessTokenWithRefreshToken($client->getRefreshToken());
                //save new access token
                WPGH_APPOINTMENTS()->calendarmeta->update_meta( $calendar_id , 'access_token',  $client->getAccessToken()  );
            }
        }
        return $client;
    }

    /**
     * set basic details of google clients and return basic client.
     *
     * @return Google_Client|WP_Error
     */

     public function get_basic_client()
    {
        $client_id = get_option('google_calendar_client_id');
        if ( ! $client_id ) {
            return  new WP_Error( 'GOOGLE_CLIENT_ID', __( "Google client id not found.", "groundhogg" ) );
        }

        $client_secret = get_option('google_calendar_secret_key');
        if( !$client_secret ) {
            return  new WP_Error( 'GOOGLE_CLIENT_SECRET', __( "Google client secret not found.", "groundhogg" ) );
        }

        $client = new Google_Client();
        $client->setApplicationName('Groundhogg Google calendar');
        $client->setScopes(Google_Service_Calendar::CALENDAR);
        $client->setClientId( $client_id );
        $client->setClientSecret( $client_secret );
        $client->setRedirectUri("urn:ietf:wg:oauth:2.0:oob");
        $client->setAccessType('offline');
        $client->setPrompt('select_account consent');
        $guzzleClient = new \GuzzleHttp\Client(array('curl' => array(CURLOPT_SSL_VERIFYPEER => false)));
        $client->setHttpClient($guzzleClient);

        return $client;
    }

    /**
     * Generate access token form authentication code generated by google.
     *
     * @param $calendar_id
     * @param $code -  authentication code generated by google
     * @return Google_Client|WP_Error
     */
    public function generate_access_token( $calendar_id ,  $code )
    {
        $client = $this->get_basic_client();
        if( is_wp_error( $client ) ) {
            return $client;
        }

        $access_token =  $client->fetchAccessTokenWithAuthCode( $code );
        $client->setAccessToken( $access_token );

        // Check to see if there was an error.
        if (array_key_exists('error', $access_token)) {
          return new WP_Error( 'ACCESS_TOKEN_ERROR', __( 'error' , "groundhogg" ) );
        }
        WPGH_APPOINTMENTS()->calendarmeta->update_meta( $calendar_id , 'access_token' ,  $client->getAccessToken() );
        return $client;

    }
}